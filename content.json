{"pages":[],"posts":[{"title":"使用Jmeter工具对微信公众号后端进行压力测试","text":"一、JMeter环境配置 根据官方文档进行安装 网址：http://jmeter.apache.org/ 解压缩后在/bin中运行jar包即可启动GUI 添加测试计划 （1）添加线程组 测试计划–右键–添加–线程–线程组 （2）添加取样器 根据需求选择相应的取样器，本次共使用3个Html取样器，分别对应用户绑定（即身份认证）、抢票、查票操作。 （3）添加循环控制器 上述3个操作应当为一个用户的基本操作流程，故应当1个线程先后进行，因此 线程组–右键–添加–逻辑控制器–循环控制器，再把3个取样器放进循环控制器中即可。 （4）并发量设置 线程组–线程属性 设置线程数（用户数量），Ramp-Up时间（测试完成的最大时间） 添加结果分析器 （1）察看结果树 用于查看每一次执行的结果。 取样器结果会显示线程的详细信息，数据包信息等； 请求会显示Request的body和headers内容； 响应数据显示Respond的body和headers内容。 （2）聚合报告 显示所有线程的统计结果。 二、POST内容 直接对服务器的api POST 在这个地方我卡了很久，服务器一直返回400 bad request Error。最终发现是Content-Type的问题，本次传输的应是JSON格式，故Content-Type应为application/json 在JMeter中手动改POST的Content-Type的方法为：取样器–右键–添加–配置元件–HTTP信息头管理器，再添加名称为Content-Type，值为所需值即可。 对微信公众号接口POST 这里主要参考微信官方公众平台技术文档，微信向后台传输xml格式数据，根据所需要测试的内容，本次为特定按钮，则参考“自定义菜单事件”中的内容，设置相应的参数即可。需要注意的是fromuser是openid，需要在服务器中预设；同时，不同的按钮对应的事件类型要匹配。 注：不要随便在xml中插入空格！ 三、一些细节的处理 返回乱码的处理 问题出在JMeter默认的编码方式为ISO-8859-1 ，不支持中文，因此需要： 取样器–右键–添加–后置处理器–Bean Shell Post Processor 然后在其中Script中输入prev.setDataEncoding(“UTF-8”); 改变编码方式即可。 动态改变POST的body 本次项目需要每个模拟用户使用不同的openid，故需要在POST的body中加入脚本，动态改变openid的值： ${__V(&quot;openid${__threadNum}&quot;)} 使用如上的代码即可将线程号附在模拟openid后，从而实现每个模拟用户的信息独立。 四、几个重要测试指标 使用取样器–右键–添加–监听器–聚合报告 在聚合报告中，尤其需要注意的有： Average：单个Request的平均响应时间，计算方法是总运行时间除以发送到服务器的总请求数，对应图形报表中的平均值。(单位是毫秒) Error%：本次测试中出错率，请求的数量/请求的总数。 Throughput：吞吐量，默认情况下表示每秒完成的请求数。（单位：请求/秒） Received KB/Sec：每秒从服务器接收到的数据量 五、参考资料 [1]https://www.cnblogs.com/tangmaokai/p/5830344.html [2]https://blog.csdn.net/go_pig/article/details/79570799 [3]http://www.51testing.com/html/28/116228-238479.html [4]https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140454","link":"/2021/12/08/%E4%BD%BF%E7%94%A8JMeter%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"},{"title":"如何搭建一个像这样的个人博客网站","text":"","link":"/2021/12/08/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%83%8F%E8%BF%99%E6%A0%B7%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"},{"title":"智能客服 - 问题存储与处理系统","text":"本项目需要对用户输入的有效问题进行结构化存储，从而应对对新问题进行相似问题检索、返回答案的需求。 思路图如下： 1. 阈值 测试方案： 待测试 2. 数据结构说明 该数据结构基于假设——若两句话中不存在近义词，则这两句话不可能是相似的。 该假设的正确性待测试。 测试方案： （1）结构 按照句中关键词建立倒排文档，每个词语对应包含该词语的一系列历史问题（及其对应答案、权重） 具体结构如下： 1234index = [{ 'keyword': keyword, 'question_list': [(question, answer, weight)],}] （2）方法 a) generate_by_list 从一线性的历史问题列表生成倒排文档 参数列表： 名称 类型 介绍 question_list list 历史问题元组的列表，每个表项为(question, answer) b) add_question 添加新问题 参数列表： 名称 类型 介绍 question String 新问题 answer String 对应的答案 c) delete_question 删除问题 //todo d) update_index 更新倒排文档，删除过时问题 //todo 二、问题处理 主要使用了python的synonyms库和jieba库。 1. 关键词提取 jieba库同时支持TF-IDF算法和TextRank算法的关键词抽取，通过对这两个算法的调查，TF-IDF是基于一较大的现成语料库进行rank；TextRank是直接对文本进行图链接矩阵计算。且二者准确度相差无几，由于本次是对较短的问题文本进行分析，故选用对短文本处理时时间、空间复杂度较低的TextRank算法。 使用jieba库中的基于 TextRank 算法的关键词抽取，需要注意的是该方法中的参数： 名称 类型 介绍 topK Integer 默认20，设置返回关键词数量上限 withWeight Boolean 默认False，设置返回时是否包括关键词分值 allowPOS Tuple 默认( 'ns', 'n', 'vn', 'v' )，即地名、名词、动名词、动词，设置关键词词性要求 关于停用词表的载入，由于在测试时发现jieba库自带的jieba.analyse.set_stop_words()方法存在问题，即在添加某些停用词后一些本应出现在关键词中的词语被过滤了，因此自定义了加载停用词的方法filter_stop_words(stop_words_path)，仅将出现在停用词表的词语剔除，从而确保不会错过某些关键词。 2. 查询 方法： a) query_linear(question) 在问题数较少时使用，全遍历所有问题，返回最高相似度评分问题，若分数过低则不返回//todo 阈值 b) query_inverted(question) 使用下述过程进行检索： 对于一新问题，首先提取关键词，再对较高排名的几个关键词进行查询//todo 阈值，对倒排文档的关键词索引进行遍历，使用synonyms库的nearby方法考察索引与待查词是否为近义词//todo 阈值，满足则将该索引后的问题加入潜在相似问题列表中，全部查询完毕后再对该列表进行遍历，逐句进行相似性判断，取最高分者的答案返回。 时间复杂度分析： 由上述过程，时间复杂度为O(mnk1+Lk2)O(mnk_1+Lk_2)O(mnk1+Lk2)，mmm为待查问题关键词数量，nnn为关键词索引数量，k1k_1k1为nearby方法时间复杂度，LLL为潜在相似问题列表长度，k2k_2k2为相似性判断时间复杂度。而全遍历的查询方法时间复杂度为O(Lallk2)O(L_{all}k_2)O(Lallk2)，那么提升空间即在于： (1) nn，即关键词索引数量，将互为近义词（相似度较高 // todo阈值）的索引合并，从而减少nn值； (2) k_2，详见下方，若使用第一种方法则固定； 若使用第二种方法，可建立问题的关键词列表进行缓存，则每次判断时只需计算待查问题的关键词即可。 3. 相似度判断 （1）使用synonyms库的compare方法直接对两个问题生成相似度评分 //todo: 阈值 （2）对两句话进行关键词提取，考察重合词语的数量以及对应的分值是否相近，如果重合词数多，且对应的词在两句中的评分靠近，则可以认为两句话是相似的。//todo 算法 三、改进空间 在何种情况下选择何种存储、处理手段，即各种阈值的确定，有待大量的测试得出。 synonyms的compare方法效果有待考证，尤其是两个词语之间的比较。未来可能会使用其nearby方法抽取的权重自定义距离算法。 四、参考资料 [1] https://www.taodocs.com/p-60725933.html TF-IDF, TextRank算法比较分析 [2] https://blog.csdn.net/u012052268/article/details/77825981/ jieba分词、加载停用词表 [3] https://github.com/fxsjy/jieba#载入词典 jieba github [4] https://github.com/huyingxi/Synonyms#welcome synonyms github","link":"/2021/12/08/%E6%99%BA%E8%83%BD%E5%AE%A2%E6%9C%8D-%E9%97%AE%E9%A2%98%E5%AD%98%E5%82%A8%E4%B8%8E%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Stress Testing","slug":"Stress-Testing","link":"/tags/Stress-Testing/"},{"name":"JMeter","slug":"JMeter","link":"/tags/JMeter/"},{"name":"Backend","slug":"Backend","link":"/tags/Backend/"}],"categories":[{"name":"Software Engineering","slug":"Software-Engineering","link":"/categories/Software-Engineering/"},{"name":"Testing","slug":"Software-Engineering/Testing","link":"/categories/Software-Engineering/Testing/"},{"name":"Backend","slug":"Software-Engineering/Backend","link":"/categories/Software-Engineering/Backend/"}]}